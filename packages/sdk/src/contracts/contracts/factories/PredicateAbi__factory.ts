/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.73.0
  Forc version: 0.49.2
  Fuel-Core version: 0.22.0
*/

import { Interface, Contract, ContractFactory } from "fuels";
import type { Provider, Account, AbstractAddress, BytesLike, DeployContractOptions, StorageSlot } from "fuels";
import type { PredicateAbi, PredicateAbiInterface } from "../PredicateAbi";

const _abi = {
  "types": [
    {
      "typeId": 0,
      "type": "[_; 10]",
      "components": [
        {
          "name": "__array_element",
          "type": 2,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "[_; 20]",
      "components": [
        {
          "name": "__array_element",
          "type": 4,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "b256",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 3,
      "type": "bool",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 4,
      "type": "u64",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [],
      "name": "main",
      "output": {
        "name": "",
        "type": 3,
        "typeArguments": null
      },
      "attributes": null
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "SIGNERS",
      "configurableType": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "offset": 3100
    },
    {
      "name": "SIGNATURES_COUNT",
      "configurableType": {
        "name": "",
        "type": 4,
        "typeArguments": null
      },
      "offset": 3084
    },
    {
      "name": "HASH_PREDICATE",
      "configurableType": {
        "name": "",
        "type": 1,
        "typeArguments": null
      },
      "offset": 2900
    }
  ]
};

const _storageSlots: StorageSlot[] = [];

export class PredicateAbi__factory {
  static readonly abi = _abi;

  static readonly storageSlots = _storageSlots;

  static createInterface(): PredicateAbiInterface {
    return new Interface(_abi) as unknown as PredicateAbiInterface
  }

  static connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider
  ): PredicateAbi {
    return new Contract(id, _abi, accountOrProvider) as unknown as PredicateAbi
  }

  static async deployContract(
    bytecode: BytesLike,
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<PredicateAbi> {
    const factory = new ContractFactory(bytecode, _abi, wallet);

    const { storageSlots } = PredicateAbi__factory;

    const contract = await factory.deployContract({
      storageSlots,
      ...options,
    });

    return contract as unknown as PredicateAbi;
  }
}
