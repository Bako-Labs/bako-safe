/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.92.1
  Forc version: 0.61.2
  Fuel-Core version: 0.31.0
*/

import { Contract, ContractFactory, Interface } from 'fuels';
import type {
  AbstractAddress,
  Account,
  BytesLike,
  DeployContractOptions,
  DeployContractResult,
  Provider,
  StorageSlot,
} from 'fuels';
import type { ContractAbi, ContractAbiInterface } from '../ContractAbi';

const _abi = {
  encoding: '1',
  types: [
    {
      typeId: 0,
      type: 'u64',
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [],
      name: 'seven',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
      attributes: null,
    },
    {
      inputs: [],
      name: 'zero',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
      attributes: null,
    },
  ],
  loggedTypes: [],
  messagesTypes: [],
  configurables: [],
};

const _storageSlots: StorageSlot[] = [];

export const ContractAbi__factory = {
  abi: _abi,

  storageSlots: _storageSlots,

  createInterface(): ContractAbiInterface {
    return new Interface(_abi) as unknown as ContractAbiInterface;
  },

  connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ): ContractAbi {
    return new Contract(id, _abi, accountOrProvider) as unknown as ContractAbi;
  },

  async deployContract(
    bytecode: BytesLike,
    wallet: Account,
    options: DeployContractOptions = {},
  ): Promise<DeployContractResult<ContractAbi>> {
    const factory = new ContractFactory(bytecode, _abi, wallet);

    return factory.deployContract<ContractAbi>({
      storageSlots: _storageSlots,
      ...options,
    });
  },
};
